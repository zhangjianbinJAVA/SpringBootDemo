<?xml version="1.0" encoding="UTF-8"?>

<!--1. scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
<!--2. scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
       当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
<!--3.debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="true" scanPeriod="60 seconds" debug="true">


    <!--引用 spring boot 默认的logback配置,可以使用这里面 appender 的 name 值-->
    <!--<include resource="org/springframework/boot/logging/logback/defaults.xml"/>-->

    <!--
    属性一：设置上下文名称<contextName>
    可以通过%contextName来打印日志上下文名称。
    -->
    <contextName>logback</contextName>


    <!--
    属性二：设置变量<property>
    可以使“${}”来使用变量。
    -->
    <!--<property name="log.path" value="E:\\test\\logback.log" />-->

    <!--从配置文件中加载属性的值-->
    <springProperty scope="context" name="springAppName" source="spring.application.name"/>

    <!--name：下面引用的值，source:配置文件中的属性，defaultValue：默认值 -->
    <springProperty name="log.path" source="logging.path" scope="context"
                    defaultValue="E:\\test\\\log\\"/>


    <!--
       appender用来格式化日志输出节点
       class用来指定哪种输出策略
     -->
    <!--输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--ThresholdFilter为系统定义的拦截器-->
        <!-- <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>ERROR</level>
         </filter>-->

        <!--<encoder>表示对日志进行编码-->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>


    <!--RollingFileAppender用于切分文件日志-->
    <!--输出到文件-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}\\log.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--定义了日志的切分方式:把每一天的日志归档到一个文件中-->
            <fileNamePattern>logback.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--表示只保留最近30天的日志，以防止日志填满整个磁盘空间-->
            <maxHistory>30</maxHistory>
            <!--用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。-->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--
    root 用来指定最基础的日志输出级别

    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
    默认是DEBUG。
    可以包含零个或多个元素，标识这个appender将会添加到这个loger
    -->
    <root level="info">
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
    </root>


    <!--
      <loger>用来设置某一个包或者具体的某一个类的日志打印级别
      - name:用来指定受此loger约束的某一个包或者具体的某一个类。
      - level:用来设置打印级别,如果未设置此属性，那么当前loger将会继承上级的级别。
      - addtivity:是否向上级loger传递打印信息。默认是true。

    logback.LogbackDemo：类的全路径
     -->
    <logger name="com.dudu.controller.LearnController" level="WARN" additivity="false">
        <appender-ref ref="console"/>
    </logger>

    <!--没用设置打印级别，所以继承他的上级的日志级别“info”-->
    <logger name="com.dudu.controller"/>


    <!--想使用spring扩展profile支持，要以logback-spring.xml命名-->
    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <springProfile name="test,dev">
        <logger name="com.dudu.controller" level="info"/>
    </springProfile>

    <!-- 生产环境. -->
    <springProfile name="prod">
        <logger name="com.dudu.controller" level="ERROR"/>
    </springProfile>

</configuration>